{"version":3,"sources":["components/PlayerImage/index.js","components/Wrapper/index.js","components/ImagesRow/index.js","components/Scores/index.js","components/Status/index.js","App.js","serviceWorker.js","index.js"],"names":["PlayerImage","props","react_default","a","createElement","className","id","src","alt","onClick","clickImage","Wrapper","children","ImagesRow","Scores","top_score","score","Status","status","App","state","players","sorted_players","playerList","_this","parseInt","clicked","forEach","value","playerListCopy","slice","playerListSorted","length","rand_index","Math","floor","random","push","splice","console","log","setState","_this2","this","components_Wrapper","components_Status","components_Scores","components_ImagesRow","map","player","components_PlayerImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f82143fe.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./style.css\"\n\nfunction PlayerImage(props) {\n    return (\n        // <div className=\"col-2\">\n            <img className = \"player-img img-thumbnail\" id = {props.id} src = {props.src} alt = \"Player\" onClick={() => props.clickImage(props.id)}>\n            </img>\n        // </div>\n    )\n}\n\nexport default PlayerImage;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"container wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\"\nimport \"./style.css\"\n\nfunction ImagesRow(props) {\n    return (\n        <div className = \"row images-row\">{props.children}</div>\n    )\n}\n\nexport default ImagesRow;","import React from \"react\"\nimport \"./style.css\"\n\nfunction Scores(props) {\n    return (\n        <div className = \"row scores-row\">\n            <div className=\"col-4\" id = \"scores\">\n                Top Score: {props.top_score} | Score: {props.score}\n            </div>\n        </div>\n        )\n}\n\nexport default Scores;","import React from \"react\"\nimport \"./style.css\"\n\nfunction Status(props) {\n    return (\n        <div className = \"row status-row\">\n            <div className=\"col-4\" id = \"status\">\n                Click on each player only once to win!\n                <br></br>\n                {props.status}\n            </div>\n        </div>\n        )\n}\n\nexport default Status;","import React, { Component } from \"react\";\nimport PlayerImage from \"./components/PlayerImage\";\nimport Wrapper from \"./components/Wrapper\";\nimport ImagesRow from \"./components/ImagesRow\";\nimport Scores from \"./components/Scores\";\nimport Status from \"./components/Status\";\nimport players from \"./images.json\";\n\nclass App extends Component {\n  state = {\n    \"players\": players,\n    \"sorted_players\": players,\n    \"score\": 0,\n    \"top_score\": 0,\n    \"status\": \"Click an image to Begin Game!\"\n  };\n\n  clickImage = id => {\n    const playerList = this.state.players;\n    var score = this.state.score;\n    var top_score = this.state.top_score;\n    var status = this.state.status;\n\n    if (!playerList[parseInt(id)].clicked){\n      playerList[parseInt(id)].clicked = true;\n\n      score++;\n\n      if (score > top_score){\n        top_score++;\n      }\n\n      status = \"You guessed correctly!\";\n    } else{\n      playerList.forEach(function(value){\n        value.clicked = false;\n      });\n\n      score = 0;\n\n      status = \"You guessed incorrectly!\";\n    }\n\n    var playerListCopy = playerList.slice(0);\n    var playerListSorted = [];\n\n    while (playerList.length > 0){\n      const rand_index = Math.floor(Math.random()*playerList.length);\n      playerListSorted.push(playerList[rand_index]);\n      playerList.splice(rand_index, 1);\n    }\n    console.log(\"Player List: \"+playerListCopy);\n    this.setState({\n    \"players\": playerListCopy,\n    \"sorted_players\": playerListSorted,\n    \"score\": score,\n    \"top_score\": top_score,\n    \"status\": status\n    });\n\n  }\n\n  render(){\n    return (\n      <Wrapper>\n        <Status status = {this.state.status}/>\n        <Scores score = {this.state.score} top_score = {this.state.top_score}/>\n        <ImagesRow>\n        {this.state.sorted_players.slice(0,4).map(player => (\n          <PlayerImage\n            clickImage = {this.clickImage}\n            src = {player.src}\n            id = {player.id}\n          />\n        ))}\n        </ImagesRow>\n        <ImagesRow>\n        {this.state.sorted_players.slice(4,8).map(player => (\n          <PlayerImage\n            clickImage = {this.clickImage}\n            src = {player.src}\n            id = {player.id}\n          />\n        ))}\n        </ImagesRow>\n        <ImagesRow>\n        {this.state.sorted_players.slice(8,12).map(player => (\n          <PlayerImage\n            clickImage = {this.clickImage}\n            src = {player.src}\n            id = {player.id}\n          />\n        ))}\n        </ImagesRow>\n      </Wrapper>\n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}